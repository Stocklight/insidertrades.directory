<h2 class="h4 mb-3">🎯 What We Accomplished</h2>
<div class="row mb-4">
  <div class="col-md-12">
    <div class="card border-info">
      <div class="card-body">
        <h5 class="card-title text-info">🛠️ Tools Demonstrated</h5>
        <ul class="list-unstyled mb-0">
          <li>• <a href="https://claude.ai/code">Claude Code</a> CLI agent with <code>--dangerously-skip-permissions</code> (YOLO mode)</li>
          <li>• Rails <a href="https://guides.rubyonrails.org/security.html#authentication">authentication generator</a></li>
          <li>• <a href="https://console.cloud.google.com/" target="_blank">Google Cloud Console</a> OAuth setup</li>
          <li>• <a href="https://developers.google.com/identity/gsi/web" target="_blank">Google Sign-In</a> integration</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<h2 class="h4 mb-3">🛠 Technical Walk-through</h2>

<h3 class="h5 mb-3">1. Generate Rails Authentication (Passwordless Users table, No Devise / Omniauth)</h3>
<p>The Devise plus Omniauth gems add 898kb and 12,900 lines of code to a rails project... And 99% of that code is unnecessary.</p>
<p>Rails now provides an <a href="https://guides.rubyonrails.org/security.html#authentication">authentication generator</a> which added 535 lines in <a href="https://github.com/Stocklight/insidertrades.directory/commit/87a1c80ecbbf1891df8facb10b725f45488a57b1">this commit</a> from the video above. That was generated by Claude Code with <a href="https://insidertrades.directory/built-with-rails/claude-code-dangerously-skip-permissions">--dangerously-skip-permissions</a> using the following prompt:</p>
<pre class="bg-light p-3 rounded" style="overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;"><code>Generate rails auth using the rails 8 authentication generator (ie. no devise) and put a 'Join mailing list' button in the page header which takes the user a /signin route with a panel on the left that has an email address field and 'Subscribe' button and on the right, has some benefits listed. 

When clicked, it should email a random new 6 digit verification code persisted on the user record (with a verification_code_generated_at column) and redirect them to a /verify route with a form for them to enter the code. When entered correctly within 15 minutes, it signs them in after which the join button becomes a 'Sign Out' button. If entered more than 15 minutes after generated, they get an expired message. Don't persist passwords for users.</code></pre>

<h3 class="h5 mb-3">2. Set up Google OAuth Client for Google Signin</h3>
<p>To prepare to add a google signin button (<a href="https://www.youtube.com/watch?v=tCVEMj-D5zI&t=220s">3:40</a> in the video above):</p>
<ul>
  <li>Create an account on <a href="https://console.cloud.google.com/">Google Cloud Console</a> and add a credit card (which won't be charged for signin integration)</li>
  <li>Menu > APIs & Services > OAuth consent screen > Create OAuth client</li>
  <li>Application type: <b>Web application</b></li>
  <li>Authorized Javascript origins: <code>https://your.url</code> + <code>http://localhost:3000</code> (for testing your dev server)</li>
  <li>Authorized redirect URIs: <code>https://your.url/google-signin</code> + <code>http://localhost:3000/google-signin</code> (note, whatever you specify here will be the callback url that google will issue a GET request to when users authenticate)</li>
  <li>Copy the <code>Client ID</code> from your generated OAuth client</li>
</ul>

<h3 class="h5 mb-3">3. Integrate Google Signin into the Rails app</h3>

Per <a href="https://github.com/Stocklight/insidertrades.directory/commit/394aa758f3c6e718747fae2d3df1d6d62d13d9d0">this git commit</a>:
<br/><br/>

<b>app/views/sessions/new.html.erb</b>
<pre class="bg-light p-3 rounded"><code>
&lt;div style="margin-bottom: 2rem;"&gt;
  &lt;div id="g_id_onload"
    data-client_id="&lt;%= GoogleSignin::WEB_CLIENT_ID %&gt;"
    data-context="signin"
    data-ux_mode="redirect"
    data-login_uri="&lt;%= google_signin_url %&gt;"
    data-auto_prompt="false"
    data-itp_support="true"&gt;
  &lt;/div&gt;

  &lt;div class="g_id_signin"
    data-type="standard"
    data-shape="rectangular"
    data-theme="outline"
    data-text="continue_with"
    data-size="large"
    data-logo_alignment="left"&gt;
  &lt;/div&gt;

  &lt;% content_for(:head) do %&gt;
    &lt;script src="https://accounts.google.com/gsi/client" async defer&gt;&lt;/script&gt;
  &lt;% end %&gt;
</code></pre>


<b>config/routes.rb</b>
<pre class="bg-light p-3 rounded"><code>post "google-signin", to: "sessions#create_for_google", as: :google_signin</code></pre>

<b>app/controllers/sessions_controller.rb</b>
<pre class="bg-light p-3 rounded"><code>    
def create_for_google
  google_signin = GoogleSignin.new(web_credential: params[:credential])

  if google_signin.valid?
    # Find or create user by email
    user = User.find_or_initialize_by(email_address: google_signin.email)
    user.google_user_id ||= google_signin.user_id
    user.first_name ||= google_signin.first_name
    user.last_name ||= google_signin.last_name
    user.photo_url ||= google_signin.photo_url
    user.save!
    
    # Sign them in
    start_new_session_for(user)
    
    flash[:notice] = "Successfully signed in with Google!"
    redirect_to root_path
  else
    flash[:alert] = "Could not authenticate you from Google"
    redirect_to signin_path
  end
rescue => e
  Rails.logger.error "Google signin error: #{e.message}"
  flash[:alert] = "Could not authenticate you from Google"
  redirect_to signin_path
end
</code></pre>

<b>app/models/google_signin.rb</b>
<pre class="bg-light p-3 rounded"><code>
class GoogleSignin
  attr_reader :email, :first_name, :last_name, :photo_url, :user_id

  # Your provided client ID
  WEB_CLIENT_ID = "THE-OAUTH-CLIENT-ID-FROM-GOOGLE-CLOUD-CONSOLE"

  def initialize(web_credential:)
    @web_credential = web_credential
    @client_id = WEB_CLIENT_ID
  end
  
  def valid?
    return false if @web_credential.blank?

    validated_token = GoogleIdTokenValidator.validate(
      token: @web_credential,
      client_id: @client_id,
    ).stringify_keys

    @email = validated_token['email']
    @first_name = validated_token['given_name']
    @last_name = validated_token['family_name']
    @photo_url = validated_token['picture']
    @user_id = validated_token['sub']
    
    @email.present?
  rescue => e
    Rails.logger.error "Google signin validation failed: #{e.message}"
    false
  end
end
</code></pre>

<b>app/models/google_id_token_validator.rb</b>
<pre class="bg-light p-3 rounded"><code>
require 'net/http'
require 'json'
require 'jwt'

class GoogleIdTokenValidator
  GOOGLE_JWKS_URI = 'https://www.googleapis.com/oauth2/v3/certs'
  GOOGLE_ISSUER = 'https://accounts.google.com'

  def self.validate(token:, client_id:)
    # Fetch the JWT header without verification
    header = JWT.decode(token, nil, false)[1]
    kid = header['kid']

    # Fetch Google's public keys
    uri = URI(GOOGLE_JWKS_URI)
    response = Net::HTTP.get_response(uri)
    jwks = JSON.parse(response.body)
    
    # Find the key that matches our token's kid
    public_key = nil
    jwks['keys'].each do |key|
      if key['kid'] == kid
        public_key = JWT::JWK.import(key).public_key
        break
      end
    end

    raise 'No matching key found' unless public_key

    # Verify the token
    decoded_token = JWT.decode(
      token,
      public_key,
      true,
      {
        algorithm: 'RS256',
        verify_iss: true,
        iss: GOOGLE_ISSUER,
        verify_aud: true,
        aud: client_id,
        verify_iat: true
      }
    )

    # Return the payload
    decoded_token.first
  rescue JWT::DecodeError, OpenSSL::PKey::RSAError => e
    raise "Token validation failed: #{e.message}"
  end
end
</code></pre>

<div class="alert alert-success">
  <strong>🎉 Google Signin Ready!</strong> Your rails app now has a google signin button and a working google signin flow.
</div>

<h2 class="h4 mb-3">🔗 Resources & Technologies</h2>
<div class="row">
  <div class="col-md-6 mb-3">
    <h5>Authentication Technologies</h5>
    <ul class="list-unstyled">
      <li><a href="https://rubyonrails.org/" target="_blank" class="text-decoration-none">🚀 Ruby on Rails 8.0</a> - Authentication generator</li>
      <li><a href="https://console.cloud.google.com/" target="_blank" class="text-decoration-none">🔐 Google Cloud Console</a> - OAuth client setup</li>
      <li><a href="https://developers.google.com/identity/gsi/web" target="_blank" class="text-decoration-none">📱 Google Sign-In for Web</a> - Identity platform</li>
      <li><a href="https://jwt.io/" target="_blank" class="text-decoration-none">🎫 JSON Web Tokens (JWT)</a> - Token validation</li>
    </ul>
  </div>
  <div class="col-md-6 mb-3">
    <h5>Development Tools</h5>
    <ul class="list-unstyled">
      <li><a href="https://claude.ai/code" target="_blank" class="text-decoration-none">🤖 Claude Code Assistant</a> - Code generation</li>
      <li><a href="https://github.com/jwt/ruby-jwt" target="_blank" class="text-decoration-none">💎 Ruby JWT Gem</a> - Token verification</li>
      <li><a href="https://guides.rubyonrails.org/security.html#authentication" target="_blank" class="text-decoration-none">📚 Rails Authentication Guide</a></li>
      <li><a href="https://developers.google.com/identity/protocols/oauth2" target="_blank" class="text-decoration-none">🔑 OAuth 2.0 Documentation</a></li>
    </ul>
  </div>
</div>
